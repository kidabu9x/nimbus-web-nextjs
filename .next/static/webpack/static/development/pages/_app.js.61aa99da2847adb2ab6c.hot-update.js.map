{"version":3,"file":"static/webpack/static/development/pages/_app.js.61aa99da2847adb2ab6c.hot-update.js","sources":["webpack:///./utils/page-list.js","webpack:///./utils/post-list.js"],"sourcesContent":["import { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\";\n\n// _app.js and _document.js are next.js specific files, and should be ignored\n// the blog directory is ignored here, but is processed in post-list.js\nconst ignoreList = [\"_app.js\", \"_document.js\", \"blog\"];\n\nconst pageFileNames = () => {\n    const allPageFileNames =\n        preval`module.exports = require(\"fs\").readdirSync(\"./pages\")` || [];\n    const filteredFileNames = allPageFileNames.filter(\n        name => !name || !ignoreList.includes(name)\n    );\n    return Promise.resolve(filteredFileNames);\n};\n\nconst createPageList = fileNameList => {\n    return fileNameList.reduce((collection, name) => {\n        // These are properties we want to extract from the file's meta export.\n        // This data is returned is added to the `collection` array below.\n        const { default: Component } = require(`../pages/${name}`);\n        const {\n            title,\n            tags,\n            layout,\n            publishDate,\n            modifiedDate,\n            seoDescription,\n            hideProgressBar = false,\n            ...moreMeta // any extra properties a page may have\n        } = require(`../pages/${name}`).meta;\n\n        // remove the extension from the file name to make a component name string\n        let cleaned_name = name.split(\".\")[0];\n\n        // format dates for SEO, but preserve publishDate as the latter is\n        // displayed on the blog post. Currently not displaying modifiedDate, but\n        // preserving it for possible future use.\n        const formattedPublishDate = formatSEODate(publishDate);\n\n        const formattedModifiedDate = formatSEODate(modifiedDate, true);\n\n        // This is used to sort pages/posts\n        const secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate);\n\n        // data that is returned for each page\n        collection.push({\n            Component,\n            title,\n            tags,\n            layout,\n            publishDate,\n            formattedPublishDate,\n            modifiedDate,\n            formattedModifiedDate,\n            seoDescription,\n            urlPath: `/${cleaned_name === \"index\" ? \"\" : cleaned_name}`,\n            canonicalUrl: `${config.baseUrl}/${\n                cleaned_name === \"index\" ? \"\" : cleaned_name\n            }`,\n            hideProgressBar,\n            name: cleaned_name,\n            type: \"page\",\n            secondsSinceEpoch,\n            ...moreMeta // any extra properties a page may have\n        });\n\n        return collection;\n    }, []);\n};\n\nexport function pages() {\n    return pageFileNames()\n        .then(fileNameList => {\n            const pageList = createPageList(fileNameList);\n            const sortedList = pageList\n                .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch)\n                .reverse();\n            return sortedList;\n        })\n        .catch(error => console.log(\"Error creating pageList\", error));\n}\n","import { formatSEODate, getSecondsSinceEpoch } from \"./formatters\";\nimport { config } from \"../config/config.yml\";\n\nconst postFileNames = () => {\n    const postFileNames =\n        preval`module.exports = require(\"fs\").readdirSync(\"./pages/blog\")` ||\n        [];\n    return Promise.resolve(postFileNames);\n};\n\nconst createPostList = fileNameList => {\n    return fileNameList.reduce((collection, name) => {\n        // These are properties we want to extract from the file's meta export.\n        // This data is returned is added to the `collection` array below.\n        const { default: Component } = require(`../pages/blog/${name}`);\n        const {\n            title,\n            tags,\n            layout,\n            publishDate,\n            modifiedDate,\n            seoDescription,\n            hideProgressBar = false,\n            exclude = false,\n            ...moreMeta // any extra properties a post may have\n        } = require(`../pages/blog/${name}`).meta;\n\n        if (exclude) return collection;\n\n        // remove the extension from the file name to make a component name string\n        const cleaned_name = name.split(\".\")[0];\n\n        // format dates for SEO, but preserve publishDate as the latter is\n        // displayed on the blog post. Currently not displaying modifiedDate, but\n        // preserving it for possible future use.\n        const formattedPublishDate = formatSEODate(publishDate);\n\n        const formattedModifiedDate = formatSEODate(modifiedDate, true);\n\n        // This is used to sort pages/posts\n        const secondsSinceEpoch = getSecondsSinceEpoch(formattedPublishDate);\n\n        // data that is returned for each page\n        collection.push({\n            Component,\n            title,\n            tags,\n            layout,\n            publishDate,\n            formattedPublishDate,\n            modifiedDate,\n            formattedModifiedDate,\n            seoDescription,\n            exclude,\n            urlPath: `/${cleaned_name}`,\n            fullUrlPath: `/blog/${cleaned_name}`,\n            canonicalUrl: `${config.baseUrl}/${cleaned_name}`,\n            hideProgressBar,\n            name: cleaned_name,\n            type: \"post\",\n            secondsSinceEpoch,\n            ...moreMeta // any extra properties a post may have\n        });\n\n        return collection;\n    }, []);\n};\n\nexport function posts() {\n    return postFileNames()\n        .then(fileNameList => {\n            const postList = createPostList(fileNameList);\n            const sortedList = postList\n                .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch)\n                .reverse();\n            return sortedList;\n        })\n        .catch(error => console.log(\"Error creating postList\", error));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAjBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;;;;A","sourceRoot":""}